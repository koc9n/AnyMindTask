type PaymentResponse {
    customerId: String
    price: String
    priceModifier: Float
    paymentMethod: String
    datetime: String
    additionalItem: AdditionalItem
    finalPrice: String
    points: Float
    error: String
}

type Sale {
    datetime: String!
    sales: Float!
    points: Float!
}

type AdditionalItem {
    last4: String
    courier: String
    bankName: String
    accountNumber: String
    chequeNumber: String
}

input AdditionalItemInput {
    last4: String
    courier: String
    bankName: String
    accountNumber: String
    chequeNumber: String
}

enum PaymentMethod {
    CASH, CASH_ON_DELIVERY, VISA, MASTERCARD, AMEX, JCB, LINE_PAY, PAYPAY, POINTS, GRAB_PAY, BANK_TRANSFER, CHEQUE
}

type Query {
    getSales(startDateTime: String!, endDateTime: String!): [Sale!]!
}

type Mutation {
    processPayment(
        customerId: String!,
        price: String!,
        priceModifier: Float!,
        paymentMethod: String!,
        datetime: String!,
        additionalItem: AdditionalItemInput!
    ): PaymentResponse
}